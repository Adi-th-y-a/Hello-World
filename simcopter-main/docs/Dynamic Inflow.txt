int funcDI (double t, const double y[], double f[], void *params)
{
    gsl_vector * fv = gsl_vector_calloc(3);
    gsl_vector * yv = gsl_vector_calloc(3);
    gsl_vector * fv1 = gsl_vector_calloc(3);

    for (int i=0;i<3;i++)
    {
        gsl_vector_set(yv,i,y[i]);
    }

    gsl_blas_dgemv(CblasNoTrans, -1.0, gMIVLI, yv, 0.0, fv);
    gsl_blas_dgemv(CblasNoTrans, 1.0, gMI, gFDI, 0.0, fv1);

    gsl_vector_add(fv,fv1);

    for (int i=0;i<3;i++)
    {
        f[i] = gsl_vector_get(fv,i);
    }

    gsl_vector_free(fv);
    gsl_vector_free(yv);
    gsl_vector_free(fv1);
    
    return GSL_SUCCESS;
}

int jacDI (double t, const double y[], double *dfdy, double dfdt[], void *params)
{
    gsl_matrix_view dfdy_mat = gsl_matrix_view_array(dfdy, 3, 3);
    gsl_matrix * m = &dfdy_mat.matrix;

    gsl_matrix_memcpy(m, gMIVLI);
    gsl_matrix_scale(m,-1.0);

    dfdt[0] = 0.0;
    dfdt[1] = 0.0;
    dfdt[2] = 0.0;

    return GSL_SUCCESS;
}

void CARRotorAerodynamics::defineMatrices_DI(int k, const CARHelicopter &Heli)
{
    int i;
    double Thrst = 0.0, Mx = 0.0, My = 0.0;
    double Fz4K[CARBlade::nadn], Mx4K[CARBlade::nadn], My4K[CARBlade::nadn];
    
    n = (CARBlade::nadn-1)/2; //NOTE: Taking only 14 points. Change later
    h = 0.05*CARBlade::R;    
    Simpson Simp;

    gsl_matrix_set(Mdi, 0, 0, 8/(3*PI));
    gsl_matrix_set(Mdi, 1, 1, -16/(45*PI));
    gsl_matrix_set(Mdi, 2, 2, -16/(45*PI));

    Inflow_Drees(k,Heli);

    vT = sqrt(pow(mu,2)+pow(lambda_avg,2));  // CHECK
    vR = (pow(mu,2)+lambda_avg*(lambda_avg+lambda_i))/vT;  // CHECK

    gsl_matrix_set(V, 0, 0, vT);
    gsl_matrix_set(V, 1, 1, vR);
    gsl_matrix_set(V, 2, 2, vR);

    chi = atan(mu/lambda_avg);

    gsl_matrix_set(L, 0, 0, 1/2);
    gsl_matrix_set(L, 0, 2, 15/64*PI*tan(chi/2));
    gsl_matrix_set(L, 1, 1, -4/(1+cos(chi)));
    gsl_matrix_set(L, 2, 0, 15/64*PI*tan(chi/2));
    gsl_matrix_set(L, 2, 2, -4*cos(chi)/(1+cos(chi)));    

    for (i=0; i<nblades; i++)
    {
        // CHECK - define psik = omega*t + 2*PI*i/nblades
        //Blade[i].Gberg_Load(Heli,*this);  // NOT NEEDED - already calculated in previous step of TrimInnerLoop

        for (int j=0; j<CARBlade::nadn; j++)
        {
            Fz4K[j] = gsl_matrix_get(Blade[i].F4K,j,2);
            Mx4K[j] = gsl_matrix_get(Blade[i].M4K,j,0);
            My4K[j] = gsl_matrix_get(Blade[i].M4K,j,1);
        }            
        
        Thrst += (Simp.Integrate(h,n,Fz4K) + Fz4K[CARBlade::nadn-1]*h/2.0);
        Mx += (Simp.Integrate(h,n,Mx4K) + Mx4K[CARBlade::nadn-1]*h/2.0)*sin(Blade[i].psik);
        My += (Simp.Integrate(h,n,My4K) + My4K[CARBlade::nadn-1]*h/2.0)*cos(Blade[i].psik);

    }
    
    CT = Thrst/(rho*PI*pow(CARBlade::R,2)*pow(Omega*CARBlade::R,2));
    CMx = Mx/(rho*PI*pow(CARBlade::R,2)*pow(Omega*CARBlade::R,2)*CARBlade::R);
    CMy = My/(rho*PI*pow(CARBlade::R,2)*pow(Omega*CARBlade::R,2)*CARBlade::R);

    gsl_vector_set(FDI, 0, CT);
    gsl_vector_set(FDI, 1, CMx);
    gsl_vector_set(FDI, 2, CMy);

    // Get the inverse of the M and L matrices
    gsl_matrix * m = gsl_matrix_calloc(Mdi->size1,Mdi->size2);
    gsl_matrix * l = gsl_matrix_calloc(L->size1,L->size2); 

    gsl_permutation * perm1 = gsl_permutation_alloc(Mdi->size1);
    gsl_permutation * perm2 = gsl_permutation_alloc(L->size1);
    int s;

    gsl_matrix_memcpy(m,Mdi);
    gsl_linalg_LU_decomp(m, perm1, &s);
    gsl_linalg_LU_invert(m, perm1, MI);

    gsl_matrix_memcpy(l,L);
    gsl_linalg_LU_decomp(l, perm2, &s);
    gsl_linalg_LU_invert(l, perm2, LI);

    gsl_matrix_free(m);
    gsl_matrix_free(l);
    gsl_permutation_free(perm1);
    gsl_permutation_free(perm2);   

    gsl_blas_dgemm(CblasNoTrans, CblasNoTrans, 1.0, MI, V, 0.0, MIV);
    gsl_blas_dgemm(CblasNoTrans, CblasNoTrans, 1.0, MIV, LI, 0.0, MIVLI);
    
    double temp1;
    
    for (int i=0;i<3;i++)
    {
        for (int j=0;j<3;j++)
        {
            temp1 = gsl_matrix_get(MI,i,j);
            gsl_matrix_set(gMI,i,j,temp1);
            
            temp1 = gsl_matrix_get(MIVLI,i,j);
            gsl_matrix_set(gMIVLI,i,j,temp1);
                        
        }
        
        temp1 = gsl_vector_get(FDI,i);
        gsl_vector_set(FDI,i,temp1);
    }

}

void CARRotorAerodynamics::Inflow_DynInflow(int k, int is, const CARHelicopter &Heli)
{    
    int j;
    
    const gsl_odeiv_step_type * T = gsl_odeiv_step_rk8pd;

    gsl_odeiv_step * s = gsl_odeiv_step_alloc (T, 3);
    gsl_odeiv_control * c = gsl_odeiv_control_y_new (1.0e-6, 0.0);
    gsl_odeiv_evolve * e = gsl_odeiv_evolve_alloc (3);
    
    gsl_odeiv_system sys;

    double t = is*dt, tf = t1;
    double h = 1.0e-6;
    double y[3];
    
    for(int i=0;i<3;i++)
    {
        y[i] = DIy[i];
    }

    while (t < tf)
    {
        defineMatrices_DI(k,Heli);
        
        sys.function = funcDI;
        sys.jacobian = jacDI;
        sys.dimension = 3;
        sys.params = NULL;

        int status = gsl_odeiv_evolve_apply(e, c, s, &sys, &t, tf, &h, y);

        if (status != GSL_SUCCESS)
            break;
    }
    
    for(int i=0;i<3;i++)
    {
        DIy[i] = y[i];
    }

    lambda1 = y[0];
    lambda1s = y[1];
    lambda1c = y[2];
    
    cout << "Calculating Dynamic Inflow" << endl;
    
    for (int j=0;j<CARBlade::nadn;j++)
    {
        Blade[k].rb = 0.25 + j*0.05;
        lambda_u[j] = -Heli.wg/(Omega*CARBlade::R) + lambda1 + lambda1c*Blade[k].rb*cos(Blade[k].psik) + lambda1s*Blade[k].rb*sin(Blade[k].psik); // CHECK: time derivative of lambda_u ?
        
    }

    gsl_odeiv_evolve_free(e);
    gsl_odeiv_control_free(c);
    gsl_odeiv_step_free(s);

}